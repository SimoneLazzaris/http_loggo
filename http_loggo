#!/usr/bin/env python3
"""
Very simple HTTP server in python for logging requests
Usage::
    ./server.py [<port>]
"""
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging, logging.handlers
import json, re 


class S(BaseHTTPRequestHandler):
    def __init__(self, request, client_address, server):
        self.logger=logging.getLogger("filelogger")
        super().__init__(request, client_address, server)
       
    def _set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
        self._set_response()
        self.wfile.write("GET request for {}\n".format(self.path).encode('utf-8'))
        
    def _log(self, d):
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        msg = ansi_escape.sub("",d["log"])                                             
        self.logger.info("%s@%s[%s]: %s", 
                         d["kubernetes"]["container_name"], 
                         d["kubernetes"]["pod_name"], 
                         d["kubernetes"]["namespace_name"],
                         msg)
        
    def do_POST(self):
        content_length = int(self.headers['Content-Length']) 
        post_data = self.rfile.read(content_length) 
        dat = json.loads(post_data)
        if isinstance(dat,list):
            for d in dat:
                self._log(d)
        elif isinstance(dat,map) and "log" in dat:
            self._log(dat)

        self._set_response()
        self.wfile.write("POST request for {}\n".format(self.path).encode('utf-8'))



def run(port, logfile, logsize, logcount, server_class=HTTPServer, handler_class=S):
    logging.basicConfig(level=logging.INFO)
    # init filelogger    
    filelogger = logging.getLogger("filelogger")
    filelogger.propagate = False
    filelogger.setLevel(logging.INFO)
    handler = logging.handlers.RotatingFileHandler(logfile, maxBytes=logsize*1024*1024, backupCount=logcount)
    formatter = logging.Formatter('%(asctime)s - %(message)s')
    handler.setFormatter(formatter)
    filelogger.addHandler(handler)

    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    logging.info('Starting httpd...\n')
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    logging.info('Stopping httpd...\n')

if __name__ == '__main__':
    import argparse
    import sdnotify
    parser=argparse.ArgumentParser("Fluent K8s HTTP logger")
    parser.add_argument("--port", type=int, default=8080, help="Port")
    parser.add_argument("--logfile", type=str, default="/tmp/fluent.log", help="Log file")
    parser.add_argument("--logsize", type=int, default=20, help="Log file size (MB)")
    parser.add_argument("--logcount", type=int, default=5, help="Log file keep count")
    args=parser.parse_args()
    n = sdnotify.SystemdNotifier()
    n.notify("READY=1")
    run(port=args.port, logfile=args.logfile, logsize=args.logsize, logcount=args.logcount)

