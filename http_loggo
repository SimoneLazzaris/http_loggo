#!/usr/bin/env python3
"""
Very simple HTTP server in python for logging requests
Usage::
    ./server.py [<port>]
"""
from http.server import BaseHTTPRequestHandler, HTTPServer, ThreadingHTTPServer
import logging, logging.handlers
import json, re, base64, bcrypt 

class S(BaseHTTPRequestHandler):
    def __init__(self, request, client_address, server):
        self.logger=logging.getLogger("filelogger")
        super().__init__(request, client_address, server)
       
    def _set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        
    def _check_auth(self):
        if not self.server.is_auth_required():
            return True
        if self.headers.get('Authorization') == None:
            self.send_response(401)
            self.send_header(
                'WWW-Authenticate', 'Basic realm="HTTP Loggo"')
            self.end_headers()
            return False
        try:
            (typ, val)=self.headers.get('Authorization').split(' ')
            if typ.lower() != "basic":
                return False
            authstring = base64.b64decode(val)
            (ht_user, ht_pass) = authstring.split(b':')
            if not self.server.check_auth(ht_user,ht_pass):
                self.send_response(403)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write("Authentication failed\n".encode("utf-8"))
                return False
        except Exception as e:
            logging.exception(e)
            return False
        return True

    def do_GET(self):
        if not self._check_auth():
            return
        if self.path=='/log':
            return self.do_GET_log()
        
        logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
        self._set_response()
        self.wfile.write("GET request for {}\n".format(self.path).encode('utf-8'))
        
    def do_GET_log(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        with open(self.server.logfile, 'rb') as file: 
            self.wfile.write(file.read())
            
    def _logmap(self, d):
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        msg = ansi_escape.sub("",d["log"])                                             
        self.logger.info("%s@%s[%s]: %s", 
                         d["kubernetes"]["container_name"], 
                         d["kubernetes"]["pod_name"], 
                         d["kubernetes"]["namespace_name"],
                         msg)

    def _logstr(self, d):
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        msg = ansi_escape.sub("",d)                                             
        self.logger.info("STR: %s", d)
        
    def _log(self, d):
        if isinstance(d,dict) and "log" in d:
            self._logmap(d)
        elif isinstance(d, str):
            self._logstr(d)
        else:
            print("??? <%s>%s"%(type(d), repr(d)))
            
    def do_POST(self):
        if not self._check_auth():
            return
        content_length = int(self.headers['Content-Length']) 
        post_data = self.rfile.read(content_length) 
        dat = json.loads(post_data.decode('utf8'))
        if isinstance(dat,list):
            for d in dat:
                self._log(d)
        else:
            self._log(dat)

        self._set_response()
        self.wfile.write("POST request for {}\n".format(self.path).encode('utf-8'))

class MyHttpServer(ThreadingHTTPServer):
    pw_map={}
    logfile=None
    timeout = 10
    def __init__(self, address, handlerClass=S):
        super().__init__(address, handlerClass)
        
    def parse_htpasswd(self, htfile):
        f=open(htfile,"rt")
        for l in f:
            user,pwd = l.strip().split(':')
            self.pw_map[user.encode('ascii')]=pwd.encode('ascii')
            
    def check_auth(self, ht_user, ht_pass):
        return (ht_user in self.pw_map) and (bcrypt.checkpw(ht_pass, self.pw_map[ht_user]))
    def is_auth_required(self):
        return len(self.pw_map)!=0
    
def run(address, port, logfile, logsize, logcount, htpasswd):
    logging.basicConfig(level=logging.INFO)
    # init filelogger    
    filelogger = logging.getLogger("filelogger")
    filelogger.propagate = False
    filelogger.setLevel(logging.INFO)
    handler = logging.handlers.RotatingFileHandler(logfile, maxBytes=logsize*1024*1024, backupCount=logcount)
    formatter = logging.Formatter('%(asctime)s - %(message)s')
    handler.setFormatter(formatter)
    filelogger.addHandler(handler)

    server_address = (address, port)
    httpd = MyHttpServer(server_address)
    if htpasswd != None:
        httpd.parse_htpasswd(htpasswd)
    httpd.logfile=logfile    
    logging.info('Starting httpd...\n')
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    logging.info('Stopping httpd...\n')

if __name__ == '__main__':
    import argparse
    import sdnotify
    parser=argparse.ArgumentParser("Fluent K8s HTTP logger")
    parser.add_argument("--address", type=str, default="0.0.0.0", help="Address")
    parser.add_argument("--port", type=int, default=8080, help="Port")
    parser.add_argument("--logfile", type=str, default="/tmp/fluent.log", help="Log file")
    parser.add_argument("--logsize", type=int, default=20, help="Log file size (MB)")
    parser.add_argument("--logcount", type=int, default=5, help="Log file keep count")
    parser.add_argument("--htpasswd", type=str, default=None, help="htpasswd file")
    args=parser.parse_args()
    n = sdnotify.SystemdNotifier()
    n.notify("READY=1")
    run(address=args.address, port=args.port, logfile=args.logfile, logsize=args.logsize, logcount=args.logcount, htpasswd=args.htpasswd)

